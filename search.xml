<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git的版本控制之道(更新中)</title>
    <url>/2023/08/22/git%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<h1 id="前言说明"><a href="#前言说明" class="headerlink" title="前言说明"></a>前言说明</h1><p>这是在阅读《版本控制之道 使用git》的笔记，主要是记录一些命令和对其的理解，结束笔记的时候会写一个小结，来大致描述这样一种模型的存在，以下是正文部分。</p>
<h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h1><h2 id="git全局设置"><a href="#git全局设置" class="headerlink" title="git全局设置"></a>git全局设置</h2><p>git 全局设定设置用户名和邮箱。因为git是分布式的版本控制器，版本库和工作目录树都是放在同一个目录下，以便联系修改者。</p>
<p>而git的版本控制是乐观锁而非严格锁，追溯修改的记录是非常严肃的事情，所以有个git一开始就要设置好自己提交的身份。</p>
<p>其中版本库往往存储本地仓库的.git目录当中。</p>
<pre><code>git config --global user.name &quot;username&quot; //用户名

git config --global user.email &quot;userEmail@xx.com&quot; //用户邮箱
</code></pre>
<h2 id="git的基本命令"><a href="#git的基本命令" class="headerlink" title="git的基本命令"></a>git的基本命令</h2><pre><code>git init //初始化一个git项目，并新建一个版本库
</code></pre>
<p>.git当中的版本库，一般是用来记录和跟踪该项目的代码。</p>
<pre><code>git log -numbaer //number为数字给git log 版本库进行消息限制

git status //为工作目录树和版本库之间的缓存区域，也就是索引，我们一般称为“暂存区”

git add //提交文件暂存对文件的修改

git commit -m //提交修改的缘由，并且写好备注是一个艺术，如果输入“\”可以多行输入。
</code></pre>
]]></content>
      <categories>
        <category>编程学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
